package ru.practicum.analyzer.processor;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.errors.WakeupException;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import ru.practicum.analyzer.config.AnalyzerProperties;
import ru.practicum.analyzer.logic.HubRegistry;
import ru.yandex.practicum.kafka.telemetry.event.*;

import java.time.Duration;
import java.util.*;

@Slf4j
@Component
@RequiredArgsConstructor
@Transactional
public class HubEventProcessor implements Runnable {

    private final Consumer<String, HubEventAvro> consumer;
    private final AnalyzerProperties props;
    private final HubRegistry handleEvent;
    private static final Map<TopicPartition, OffsetAndMetadata> currentOffsets = new HashMap<>();

    @Override
    public void run() {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ HubEventProcessor...");

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫
        String topic = props.getHubTopic();
        consumer.subscribe(List.of(topic));
        log.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ —Å —Ö–∞–±-—Å–æ–±—ã—Ç–∏—è–º–∏: {}", topic);

        try {
            while (true) {
                log.debug("üì° –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka...");

                ConsumerRecords<String, HubEventAvro> records = consumer.poll(Duration.ofMillis(2000));
                int count = records.count();
                log.debug("üì• –ü–æ–ª—É—á–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ Kafka", count);

                for (ConsumerRecord<String, HubEventAvro> record : records) {
                    HubEventAvro event = record.value();
                    log.debug("üì¶ –ü–æ–ª—É—á–µ–Ω event: {}", record);
                    log.debug("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ö–∞–±–∞ '{}': –∫–ª—é—á='{}', offset={}, partition={}",
                            event.getHubId(), record.key(), record.offset(), record.partition());
                    handleEvent.handle(event);
                    log.debug("üíæ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç offset'–æ–≤...");
                    manageOffsets(record, consumer);
                }


            }
        } catch (WakeupException ignored) {
            log.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ö–∞–±–∞ –ø–æ —Å–∏–≥–Ω–∞–ª—É Wakeup");
        } catch (Exception e) {
            log.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π", e);
        } finally {
            try {
                log.info("üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–º–º–∏—Ç offset'–æ–≤...");
                consumer.commitSync();
            } catch (Exception e) {
                log.warn("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–º–º–∏—Ç–µ offset'–æ–≤", e);
            } finally {
                consumer.close();
                log.info("üßπ Consumer —Ö–∞–±–∞ –∑–∞–∫—Ä—ã—Ç");
            }
        }
    }
    private static void manageOffsets(ConsumerRecord<String, HubEventAvro> record,
                                      Consumer<String, HubEventAvro> consumer) {
        currentOffsets.put(
                new TopicPartition(record.topic(), record.partition()),
                new OffsetAndMetadata(record.offset() + 1)
        );
    }
}