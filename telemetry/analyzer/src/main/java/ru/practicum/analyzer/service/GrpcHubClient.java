package ru.practicum.analyzer.service;

import com.google.protobuf.Timestamp;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.devh.boot.grpc.client.inject.GrpcClient;
import org.springframework.stereotype.Service;
import ru.practicum.analyzer.model.Action;
import ru.yandex.practicum.grpc.telemetry.event.ActionTypeProto;
import ru.yandex.practicum.grpc.telemetry.event.DeviceActionProto;
import ru.yandex.practicum.grpc.telemetry.event.DeviceActionRequest;
import ru.yandex.practicum.grpc.telemetry.hubRouter.HubRouterControllerGrpc;

import java.time.Duration;
import java.time.Instant;

@Slf4j
@Service
public class GrpcHubClient {

    // gRPC-–∫–ª–∏–µ–Ω—Ç, –≤–Ω–µ–¥—Ä—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ @GrpcClient –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è "hub-router"

    private final HubRouterControllerGrpc.HubRouterControllerBlockingStub hubStub;

    public GrpcHubClient( @GrpcClient("hub-router") HubRouterControllerGrpc.HubRouterControllerBlockingStub hubStub) {
        this.hubStub = hubStub;
    }

    /**
     * –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ö–∞–±
     *
     * @param hubId         –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞–±–∞
     * @param scenarioName  –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
     * @param action        –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
     * @param timestamp     –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π
     */
    public void sendAction(String hubId, String scenarioName, Action action, Instant timestamp) {
        // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        DeviceActionProto actionProto = buildActionProto(action);

        // –§–æ—Ä–º–∏—Ä—É–µ–º gRPC-–∑–∞–ø—Ä–æ—Å
        DeviceActionRequest request = DeviceActionRequest.newBuilder()
                .setHubId(hubId)
                .setScenarioName(scenarioName)
                .setAction(actionProto)
                .setTimestamp(toProtoTimestamp(timestamp))
                .build();

        try {
            // –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            Instant start = Instant.now();

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ gRPC
            hubStub.handleDeviceAction(request);

            // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            Duration duration = Duration.between(start, Instant.now());
            log.info("üöÄ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {} -> {}, —Ç–∏–ø: {}, –∑–∞ {} –º—Å",
                    scenarioName, action.getSensor().getId(), action.getType(), duration.toMillis());
        } catch (Exception e) {
            // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ gRPC-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è {} -> {}", action.getSensor().getId(), action.getType(), e);
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç Action –≤ protobuf-—Å–æ–æ–±—â–µ–Ω–∏–µ DeviceActionProto
     */
    private DeviceActionProto buildActionProto(Action action) {
        ActionTypeProto protoType = ActionTypeProto.valueOf(action.getType().name());
        DeviceActionProto.Builder builder = DeviceActionProto.newBuilder()
                .setSensorId(action.getSensor().getId()) // ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                .setType(protoType); // –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –≤ –≤–∏–¥–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è enum'–∞

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–¥–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
        if (action.getValue() != null) {
            builder.setValue(action.getValue());
        }

        return builder.build();
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç java.time.Instant –≤ protobuf Timestamp
     */
    private Timestamp toProtoTimestamp(Instant instant) {
        return Timestamp.newBuilder()
                .setSeconds(instant.getEpochSecond())
                .setNanos(instant.getNano())
                .build();
    }
}