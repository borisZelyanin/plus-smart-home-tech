package ru.practicum.collector.handler.hub;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.practicum.collector.model.hub.*;
import ru.practicum.collector.service.HubEventService;
import ru.yandex.practicum.grpc.telemetry.event.HubEventProto;

import java.time.Instant;
import java.util.List;

@Slf4j
@Component
public class ScenarioAddedEventHandler implements HubEventHandler {

    private final HubEventService hubEventService;

    public ScenarioAddedEventHandler(HubEventService hubEventService) {
        this.hubEventService = hubEventService;
    }

    @Override
    public HubEventProto.PayloadCase getMessageType() {
        return HubEventProto.PayloadCase.SCENARIO_ADDED;
    }

    @Override
    public void handle(HubEventProto event) {
        var payload = event.getScenarioAddedOrBuilder();

        log.info("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è SCENARIO_ADDED –æ—Ç —Ö–∞–±–∞: {}, –∏–º—è —Å—Ü–µ–Ω–∞—Ä–∏—è: {}", event.getHubId(), payload.getName());

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ª–æ–≤–∏–π
        List<ScenarioCondition> conditions = payload.getConditionList().stream()
                .map(proto -> {
                    ScenarioCondition condition = new ScenarioCondition();
                    condition.setSensorId(proto.getSensorId());
                    condition.setType(ConditionType.valueOf(proto.getType().name()));
                    condition.setOperation(ConditionOperation.valueOf(proto.getOperation().name()));

                    switch (proto.getValueCase()) {
                        case BOOL_VALUE -> condition.setValue(proto.getBoolValue());
                        case INT_VALUE -> condition.setValue(proto.getIntValue());
                        default -> log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è: {}", proto.getValueCase());
                    }

                    log.debug("üîß –£—Å–ª–æ–≤–∏–µ: sensorId={}, type={}, operation={}, value={}",
                            condition.getSensorId(), condition.getType(), condition.getOperation(), condition.getValue());

                    return condition;
                })
                .toList();

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        List<DeviceAction> actions = payload.getActionList().stream()
                .map(proto -> {
                    DeviceAction action = new DeviceAction();
                    action.setSensorId(proto.getSensorId());
                    action.setType(ActionType.valueOf(proto.getType().name()));
                    if (proto.hasValue()) {
                        action.setValue(proto.getValue());
                    }

                    log.debug("‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: sensorId={}, type={}, value={}",
                            action.getSensorId(), action.getType(), action.getValue());

                    return action;
                })
                .toList();

        // –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        ScenarioAddedEvent converted = ScenarioAddedEvent.builder()
                .name(payload.getName())
                .conditions(conditions)
                .actions(actions)
                .build();

        converted.setHubId(event.getHubId());
        converted.setTimestamp(Instant.ofEpochSecond(
                event.getTimestamp().getSeconds(),
                event.getTimestamp().getNanos()
        ));

        log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ HubEventService: {}, —É—Å–ª–æ–≤–∏–π: {}, –¥–µ–π—Å—Ç–≤–∏–π: {}",
                converted.getName(), conditions.size(), actions.size());

        hubEventService.send(converted);

        log.info("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π '{}' –æ—Ç —Ö–∞–±–∞ '{}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", converted.getName(), converted.getHubId());
    }
}